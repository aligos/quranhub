"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var forOwn = require('lodash.forown');
var assign = require('lodash.assign');
var isEqual = require('lodash.isequal');
var getFromAST_1 = require('./queries/getFromAST');
var queryTransform_1 = require('./queries/queryTransform');
var printer_1 = require('graphql-tag/printer');
var readFromStore_1 = require('./data/readFromStore');
var diffAgainstStore_1 = require('./data/diffAgainstStore');
var queryPrinting_1 = require('./queryPrinting');
var batching_1 = require('./batching');
var scheduler_1 = require('./scheduler');
var Observable_1 = require('./util/Observable');
var ObservableQuery = (function (_super) {
    __extends(ObservableQuery, _super);
    function ObservableQuery() {
        _super.apply(this, arguments);
    }
    ObservableQuery.prototype.subscribe = function (observer) {
        return _super.prototype.subscribe.call(this, observer);
    };
    ObservableQuery.prototype.result = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var subscription = _this.subscribe({
                next: function (result) {
                    resolve(result);
                    setTimeout(function () {
                        subscription.unsubscribe();
                    }, 0);
                },
                error: function (error) {
                    reject(error);
                },
            });
        });
    };
    return ObservableQuery;
}(Observable_1.Observable));
exports.ObservableQuery = ObservableQuery;
var QueryManager = (function () {
    function QueryManager(_a) {
        var _this = this;
        var networkInterface = _a.networkInterface, store = _a.store, reduxRootKey = _a.reduxRootKey, queryTransformer = _a.queryTransformer, _b = _a.shouldBatch, shouldBatch = _b === void 0 ? false : _b;
        this.idCounter = 0;
        this.batcherPollInterval = 10;
        this.networkInterface = networkInterface;
        this.store = store;
        this.reduxRootKey = reduxRootKey;
        this.queryTransformer = queryTransformer;
        this.pollingTimers = {};
        this.queryListeners = {};
        this.scheduler = new scheduler_1.QueryScheduler({
            queryManager: this,
        });
        this.batcher = new batching_1.QueryBatcher({
            shouldBatch: shouldBatch,
            networkInterface: this.networkInterface,
        });
        this.batcher.start(this.batcherPollInterval);
        this.fetchQueryPromises = {};
        this.observableQueries = {};
        if (this.store['subscribe']) {
            var currentStoreData_1;
            this.store['subscribe'](function () {
                var previousStoreData = currentStoreData_1 || {};
                var previousStoreHasData = Object.keys(previousStoreData).length;
                currentStoreData_1 = _this.getApolloState();
                if (isEqual(previousStoreData, currentStoreData_1) && previousStoreHasData) {
                    return;
                }
                _this.broadcastQueries();
            });
        }
    }
    QueryManager.prototype.broadcastNewStore = function (store) {
        this.broadcastQueries();
    };
    QueryManager.prototype.mutate = function (_a) {
        var _this = this;
        var mutation = _a.mutation, variables = _a.variables, resultBehaviors = _a.resultBehaviors, _b = _a.fragments, fragments = _b === void 0 ? [] : _b;
        var mutationId = this.generateQueryId();
        var mutationDef = getFromAST_1.getMutationDefinition(mutation);
        if (this.queryTransformer) {
            mutationDef = queryTransform_1.applyTransformerToOperation(mutationDef, this.queryTransformer);
            mutation = getFromAST_1.replaceOperationDefinition(mutation, mutationDef);
        }
        mutation = getFromAST_1.replaceOperationDefinition(mutation, mutationDef);
        mutation = getFromAST_1.addFragmentsToDocument(mutation, fragments);
        var mutationString = printer_1.print(mutation);
        var queryFragmentMap = getFromAST_1.createFragmentMap(getFromAST_1.getFragmentDefinitions(mutation));
        var request = {
            query: mutation,
            variables: variables,
            operationName: getFromAST_1.getOperationName(mutation),
        };
        this.store.dispatch({
            type: 'APOLLO_MUTATION_INIT',
            mutationString: mutationString,
            mutation: {
                id: 'ROOT_MUTATION',
                typeName: 'Mutation',
                selectionSet: mutationDef.selectionSet,
            },
            variables: variables,
            mutationId: mutationId,
            fragmentMap: queryFragmentMap,
        });
        return this.networkInterface.query(request)
            .then(function (result) {
            _this.store.dispatch({
                type: 'APOLLO_MUTATION_RESULT',
                result: result,
                mutationId: mutationId,
                resultBehaviors: resultBehaviors,
            });
            return result;
        });
    };
    QueryManager.prototype.queryListenerForObserver = function (options, observer) {
        var _this = this;
        return function (queryStoreValue) {
            if (!queryStoreValue.loading || queryStoreValue.returnPartialData) {
                if (queryStoreValue.graphQLErrors) {
                    if (observer.next) {
                        observer.next({ errors: queryStoreValue.graphQLErrors });
                    }
                }
                else if (queryStoreValue.networkError) {
                    if (observer.error) {
                        observer.error(queryStoreValue.networkError);
                    }
                    else {
                        console.error('Unhandled network error', queryStoreValue.networkError, queryStoreValue.networkError.stack);
                    }
                }
                else {
                    var resultFromStore = readFromStore_1.readSelectionSetFromStore({
                        store: _this.getApolloState().data,
                        rootId: queryStoreValue.query.id,
                        selectionSet: queryStoreValue.query.selectionSet,
                        variables: queryStoreValue.variables,
                        returnPartialData: options.returnPartialData,
                        fragmentMap: queryStoreValue.fragmentMap,
                    });
                    if (observer.next) {
                        observer.next({ data: resultFromStore });
                    }
                }
            }
        };
    };
    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {
        var _this = this;
        if (shouldSubscribe === void 0) { shouldSubscribe = true; }
        getFromAST_1.getQueryDefinition(options.query);
        var observableQuery = new ObservableQuery(function (observer) {
            var queryId = _this.generateQueryId();
            var retQuerySubscription = {
                unsubscribe: function () {
                    _this.stopQuery(queryId);
                },
                refetch: function (variables) {
                    variables = variables || options.variables;
                    return _this.fetchQuery(queryId, assign(options, {
                        forceFetch: true,
                        variables: variables,
                    }));
                },
                stopPolling: function () {
                    if (_this.pollingTimers[queryId]) {
                        clearInterval(_this.pollingTimers[queryId]);
                    }
                },
                startPolling: function (pollInterval) {
                    _this.pollingTimers[queryId] = setInterval(function () {
                        var pollingOptions = assign({}, options);
                        pollingOptions.forceFetch = true;
                        _this.fetchQuery(queryId, pollingOptions);
                    }, pollInterval);
                },
            };
            if (shouldSubscribe) {
                _this.addObservableQuery(queryId, observableQuery);
                _this.addQuerySubscription(queryId, retQuerySubscription);
            }
            _this.startQuery(queryId, options, function (queryStoreValue) {
                if (!queryStoreValue) {
                    return;
                }
                if (!queryStoreValue.loading || queryStoreValue.returnPartialData) {
                    if (queryStoreValue.graphQLErrors) {
                        if (observer.next) {
                            observer.next({ errors: queryStoreValue.graphQLErrors });
                        }
                    }
                    else if (queryStoreValue.networkError) {
                        if (observer.error) {
                            observer.error(queryStoreValue.networkError);
                        }
                        else {
                            console.error('Unhandled network error', queryStoreValue.networkError, queryStoreValue.networkError.stack);
                        }
                    }
                    else {
                        var resultFromStore = readFromStore_1.readSelectionSetFromStore({
                            store: _this.getApolloState().data,
                            rootId: queryStoreValue.query.id,
                            selectionSet: queryStoreValue.query.selectionSet,
                            variables: queryStoreValue.variables,
                            returnPartialData: options.returnPartialData,
                            fragmentMap: queryStoreValue.fragmentMap,
                        });
                        if (observer.next) {
                            observer.next({ data: resultFromStore });
                        }
                    }
                }
            });
            return retQuerySubscription;
        });
        return observableQuery;
    };
    QueryManager.prototype.query = function (options) {
        var _this = this;
        if (options.returnPartialData) {
            throw new Error('returnPartialData option only supported on watchQuery.');
        }
        if (options.query.kind !== 'Document') {
            throw new Error('You must wrap the query string in a "gql" tag.');
        }
        var requestId = this.idCounter;
        var resPromise = new Promise(function (resolve, reject) {
            _this.addFetchQueryPromise(requestId, resPromise, resolve, reject);
            return _this.watchQuery(options, false).result().then(function (result) {
                _this.removeFetchQueryPromise(requestId);
                resolve(result);
            }).catch(function (error) {
                _this.removeFetchQueryPromise(requestId);
                reject(error);
            });
        });
        return resPromise;
    };
    QueryManager.prototype.fetchQuery = function (queryId, options) {
        return this.fetchQueryOverInterface(queryId, options, this.networkInterface);
    };
    QueryManager.prototype.generateQueryId = function () {
        var queryId = this.idCounter.toString();
        this.idCounter++;
        return queryId;
    };
    QueryManager.prototype.stopQueryInStore = function (queryId) {
        this.store.dispatch({
            type: 'APOLLO_QUERY_STOP',
            queryId: queryId,
        });
    };
    ;
    QueryManager.prototype.getApolloState = function () {
        return this.store.getState()[this.reduxRootKey];
    };
    QueryManager.prototype.addQueryListener = function (queryId, listener) {
        this.queryListeners[queryId] = listener;
    };
    ;
    QueryManager.prototype.removeQueryListener = function (queryId) {
        delete this.queryListeners[queryId];
    };
    QueryManager.prototype.addFetchQueryPromise = function (requestId, promise, resolve, reject) {
        this.fetchQueryPromises[requestId.toString()] = { promise: promise, resolve: resolve, reject: reject };
    };
    QueryManager.prototype.removeFetchQueryPromise = function (requestId) {
        delete this.fetchQueryPromises[requestId.toString()];
    };
    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {
        this.observableQueries[queryId] = { observableQuery: observableQuery, subscriptions: [] };
    };
    QueryManager.prototype.addQuerySubscription = function (queryId, querySubscription) {
        if (this.observableQueries.hasOwnProperty(queryId)) {
            this.observableQueries[queryId].subscriptions.push(querySubscription);
        }
        else {
            this.observableQueries[queryId] = {
                observableQuery: null,
                subscriptions: [querySubscription],
            };
        }
    };
    QueryManager.prototype.removeObservableQuery = function (queryId) {
        delete this.observableQueries[queryId];
    };
    QueryManager.prototype.resetStore = function () {
        var _this = this;
        Object.keys(this.fetchQueryPromises).forEach(function (key) {
            var reject = _this.fetchQueryPromises[key].reject;
            reject(new Error('Store reset while query was in flight.'));
        });
        this.store.dispatch({
            type: 'APOLLO_STORE_RESET',
            observableQueryIds: Object.keys(this.observableQueries),
        });
        Object.keys(this.observableQueries).forEach(function (queryId) {
            var subscriptions = _this.observableQueries[queryId].subscriptions;
            subscriptions[subscriptions.length - 1].refetch();
        });
    };
    QueryManager.prototype.fetchQueryOverInterface = function (queryId, options, network) {
        var _this = this;
        var query = options.query, variables = options.variables, _a = options.forceFetch, forceFetch = _a === void 0 ? false : _a, _b = options.returnPartialData, returnPartialData = _b === void 0 ? false : _b, _c = options.fragments, fragments = _c === void 0 ? [] : _c;
        var queryDef = getFromAST_1.getQueryDefinition(query);
        if (this.queryTransformer) {
            queryDef = queryTransform_1.applyTransformerToOperation(queryDef, this.queryTransformer);
        }
        var transformedQuery = getFromAST_1.replaceOperationDefinition(query, queryDef);
        transformedQuery = getFromAST_1.addFragmentsToDocument(transformedQuery, fragments);
        var queryFragmentMap = getFromAST_1.createFragmentMap(getFromAST_1.getFragmentDefinitions(transformedQuery));
        var queryString = printer_1.print(transformedQuery);
        var querySS = {
            id: 'ROOT_QUERY',
            typeName: 'Query',
            selectionSet: queryDef.selectionSet,
        };
        var minimizedQueryString = queryString;
        var minimizedQuery = querySS;
        var minimizedQueryDoc = transformedQuery;
        var initialResult;
        if (!forceFetch) {
            var _d = diffAgainstStore_1.diffSelectionSetAgainstStore({
                selectionSet: querySS.selectionSet,
                store: this.store.getState()[this.reduxRootKey].data,
                throwOnMissingField: false,
                rootId: querySS.id,
                variables: variables,
                fragmentMap: queryFragmentMap,
            }), missingSelectionSets = _d.missingSelectionSets, result = _d.result;
            initialResult = result;
            if (missingSelectionSets && missingSelectionSets.length) {
                var diffedQuery = queryPrinting_1.queryDocument({
                    missingSelectionSets: missingSelectionSets,
                    variableDefinitions: queryDef.variableDefinitions,
                    name: queryDef.name,
                    fragmentMap: queryFragmentMap,
                });
                var diffedQueryDef = getFromAST_1.getQueryDefinition(diffedQuery);
                minimizedQuery = {
                    id: 'ROOT_QUERY',
                    typeName: 'Query',
                    selectionSet: diffedQueryDef.selectionSet,
                };
                minimizedQueryString = printer_1.print(diffedQuery);
                minimizedQueryDoc = diffedQuery;
            }
            else {
                minimizedQuery = null;
                minimizedQueryString = null;
                minimizedQueryDoc = null;
            }
        }
        var requestId = this.generateRequestId();
        this.store.dispatch({
            type: 'APOLLO_QUERY_INIT',
            queryString: queryString,
            query: querySS,
            minimizedQueryString: minimizedQueryString,
            minimizedQuery: minimizedQuery,
            variables: variables,
            forceFetch: forceFetch,
            returnPartialData: returnPartialData,
            queryId: queryId,
            requestId: requestId,
            fragmentMap: queryFragmentMap,
        });
        if (!minimizedQuery || returnPartialData) {
            this.store.dispatch({
                type: 'APOLLO_QUERY_RESULT_CLIENT',
                result: {
                    data: initialResult,
                },
                variables: variables,
                query: querySS,
                complete: !!minimizedQuery,
                queryId: queryId,
            });
        }
        if (minimizedQuery) {
            var request = {
                query: minimizedQueryDoc,
                variables: variables,
                operationName: getFromAST_1.getOperationName(minimizedQueryDoc),
            };
            var fetchRequest_1 = {
                options: { query: minimizedQueryDoc, variables: variables },
                queryId: queryId,
                operationName: request.operationName,
            };
            var retPromise_1 = new Promise(function (resolve, reject) {
                _this.addFetchQueryPromise(requestId, retPromise_1, resolve, reject);
                return _this.batcher.enqueueRequest(fetchRequest_1)
                    .then(function (result) {
                    _this.store.dispatch({
                        type: 'APOLLO_QUERY_RESULT',
                        result: result,
                        queryId: queryId,
                        requestId: requestId,
                    });
                    _this.removeFetchQueryPromise(requestId);
                    return result;
                }).then(function () {
                    var resultFromStore;
                    try {
                        resultFromStore = readFromStore_1.readSelectionSetFromStore({
                            store: _this.getApolloState().data,
                            rootId: querySS.id,
                            selectionSet: querySS.selectionSet,
                            variables: variables,
                            returnPartialData: returnPartialData,
                            fragmentMap: queryFragmentMap,
                        });
                    }
                    catch (e) { }
                    _this.removeFetchQueryPromise(requestId);
                    resolve({ data: resultFromStore });
                }).catch(function (error) {
                    _this.store.dispatch({
                        type: 'APOLLO_QUERY_ERROR',
                        error: error,
                        queryId: queryId,
                        requestId: requestId,
                    });
                    _this.removeFetchQueryPromise(requestId);
                    return error;
                });
            });
            return retPromise_1;
        }
        return new Promise(function (resolve) {
            resolve({ data: initialResult });
        });
    };
    QueryManager.prototype.startQuery = function (queryId, options, listener) {
        var _this = this;
        this.queryListeners[queryId] = listener;
        this.fetchQuery(queryId, options);
        if (options.pollInterval) {
            this.pollingTimers[queryId] = setInterval(function () {
                var pollingOptions = assign({}, options);
                pollingOptions.forceFetch = true;
                _this.fetchQuery(queryId, pollingOptions);
            }, options.pollInterval);
        }
        return queryId;
    };
    QueryManager.prototype.stopQuery = function (queryId) {
        delete this.queryListeners[queryId];
        if (this.pollingTimers[queryId]) {
            clearInterval(this.pollingTimers[queryId]);
        }
        this.store.dispatch({
            type: 'APOLLO_QUERY_STOP',
            queryId: queryId,
        });
    };
    QueryManager.prototype.broadcastQueries = function () {
        var queries = this.getApolloState().queries;
        forOwn(this.queryListeners, function (listener, queryId) {
            if (listener) {
                var queryStoreValue = queries[queryId];
                listener(queryStoreValue);
            }
        });
    };
    QueryManager.prototype.generateRequestId = function () {
        var requestId = this.idCounter;
        this.idCounter++;
        return requestId;
    };
    return QueryManager;
}());
exports.QueryManager = QueryManager;
//# sourceMappingURL=QueryManager.js.map