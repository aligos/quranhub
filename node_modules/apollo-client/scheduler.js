"use strict";
var QueryManager_1 = require('./QueryManager');
var assign = require('lodash.assign');
var QueryScheduler = (function () {
    function QueryScheduler(_a) {
        var queryManager = _a.queryManager;
        this.queryManager = queryManager;
        this.pollingTimers = {};
        this.inFlightQueries = {};
    }
    QueryScheduler.prototype.checkInFlight = function (queryId) {
        return this.inFlightQueries.hasOwnProperty(queryId);
    };
    QueryScheduler.prototype.fetchQuery = function (queryId, options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.queryManager.fetchQuery(queryId, options).then(function (result) {
                _this.removeInFlight(queryId);
                resolve(result);
            }).catch(function (error) {
                _this.removeInFlight(queryId);
                reject(error);
            });
            _this.addInFlight(queryId, options);
        });
    };
    QueryScheduler.prototype.startPollingQuery = function (options, listener, queryId) {
        var _this = this;
        if (!queryId) {
            queryId = this.queryManager.generateQueryId();
            this.fetchQuery(queryId, options);
        }
        this.queryManager.addQueryListener(queryId, listener);
        this.pollingTimers[queryId] = setInterval(function () {
            var pollingOptions = assign({}, options);
            pollingOptions.forceFetch = true;
            if (!_this.checkInFlight(queryId)) {
                _this.fetchQuery(queryId, pollingOptions);
            }
        }, options.pollInterval);
        return queryId;
    };
    QueryScheduler.prototype.stopPollingQuery = function (queryId) {
        this.queryManager.removeQueryListener(queryId);
        if (this.pollingTimers[queryId]) {
            clearInterval(this.pollingTimers[queryId]);
        }
        this.queryManager.stopQueryInStore(queryId);
    };
    QueryScheduler.prototype.registerPollingQuery = function (options) {
        var _this = this;
        if (!options.pollInterval) {
            throw new Error('Tried to register a non-polling query with the scheduler.');
        }
        return new QueryManager_1.ObservableQuery(function (observer) {
            var queryListener = _this.queryManager.queryListenerForObserver(options, observer);
            var queryId = _this.startPollingQuery(options, queryListener);
            return {
                unsubscribe: function () {
                    _this.stopPollingQuery(queryId);
                },
                refetch: function (variables) {
                    variables = variables || options.variables;
                    return _this.fetchQuery(queryId, assign(options, {
                        forceFetch: true,
                        variables: variables,
                    }));
                },
                startPolling: function (pollInterval) {
                    _this.pollingTimers[queryId] = setInterval(function () {
                        var pollingOptions = assign({}, options);
                        pollingOptions.forceFetch = true;
                        _this.fetchQuery(queryId, pollingOptions).then(function () {
                            _this.removeInFlight(queryId);
                        });
                    }, pollInterval);
                },
                stopPolling: function () {
                    _this.stopPollingQuery(queryId);
                },
            };
        });
    };
    QueryScheduler.prototype.addInFlight = function (queryId, options) {
        this.inFlightQueries[queryId] = options;
    };
    QueryScheduler.prototype.removeInFlight = function (queryId) {
        delete this.inFlightQueries[queryId];
    };
    return QueryScheduler;
}());
exports.QueryScheduler = QueryScheduler;
//# sourceMappingURL=scheduler.js.map