{"version":3,"sources":["../../source/plugin/write assets.js"],"names":[],"mappings":"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","file":"write assets.js","sourcesContent":["import fs     from 'fs-extra'\r\nimport path   from 'path'\r\n\r\nimport require_hacker from 'require-hacker'\r\nimport serialize      from '../tools/serialize-javascript'\r\n\r\nimport { exists, clone, replace_all, starts_with, last } from '../helpers'\r\nimport { alias_hook, uniform_path } from '../common'\r\n\r\n// writes webpack-assets.json file, which contains assets' file paths\r\nexport default function write_assets(json, options, log)\r\n{\r\n\t// take the passed in options\r\n\toptions = clone(options)\r\n\r\n\tlog.debug(`running write assets webpack plugin v${require('../../package.json').version} with options`, options)\r\n\r\n\t// make webpack stats accessible for asset functions (parser, path, filter)\r\n\toptions.webpack_stats = json\r\n\r\n\tconst development = options.development\r\n\r\n\tif (development)\r\n\t{\r\n\t\tlog.debug(' (development mode is on)')\r\n\t}\r\n\r\n\t// write webpack stats json for debugging purpose\r\n\tif (options.debug)\r\n\t{\r\n\t\t// write webpack stats file\r\n\t\tlog.debug(`writing webpack stats to ${options.webpack_stats_path}`)\r\n\r\n\t\t// write the file\r\n\t\t// (format the JSON for better readability)\r\n\t\tfs.outputFileSync(options.webpack_stats_path, JSON.stringify(json, null, 2))\r\n\t}\r\n\r\n\t// the output object with assets\r\n\tconst output = options.output\r\n\r\n\t// populate the output object with assets\r\n\tpopulate_assets(output, json, options, log)\r\n\r\n\t// write webpack assets info file\r\n\tif (options.output_to_a_file)\r\n\t{\r\n\t\t// format the JSON for better readability if in debug mode\r\n\t\tconst assets_info = development ? JSON.stringify(output, null, 2) : JSON.stringify(output)\r\n\r\n\t\t// rewrite `webpack-assets.json`\r\n\t\tlet rewrite = true\r\n\r\n\t\t// for `webpack-assets.json` caching to work\r\n\t\t// chunks info should be moved out of it,\r\n\t\t// otherwise chunk hashsums constantly change,\r\n\t\t// and there won't be any caching.\r\n\t\t//\r\n\t\t// const assets_buffer = Buffer.from(assets_info)\r\n\t\t//\r\n\t\t// // if webpack-assets.json already exists,\r\n\t\t// // then maybe no need to rewrite it\r\n\t\t// if (fs.existsSync(options.webpack_assets_path))\r\n\t\t// {\r\n\t\t// \t// previously written webpack-assets.json\r\n\t\t// \tconst previous_assets_buffer = fs.readFileSync(options.webpack_assets_path)\r\n\t\t//\r\n\t\t// \t// if webpack-assets.json rewrite is not needed, then don't do it\r\n\t\t// \tif (assets_buffer.equals(previous_assets_buffer))\r\n\t\t// \t{\r\n\t\t// \t\trewrite = false\r\n\t\t// \t}\r\n\t\t// }\r\n\r\n\t\t// if webpack-assets.json rewrite is needed, then do it\r\n\t\tif (rewrite)\r\n\t\t{\r\n\t\t\tlog.debug(`writing webpack assets info to ${options.webpack_assets_path}`)\r\n\t\t\t// write the file\r\n\t\t\tfs.outputFileSync(options.webpack_assets_path, assets_info)\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tlog.debug(`serving webpack assets from memory`)\r\n\t}\r\n\r\n\t// return Webpack assets JSON object\r\n\t// for serving it through HTTP service\r\n\treturn output\r\n}\r\n\r\n// populates the output object with assets\r\nfunction populate_assets(output, json, options, log)\r\n{\r\n\t// for each chunk name (\"main\", \"common\", ...)\r\n\tObject.keys(json.assetsByChunkName).forEach(function(name)\r\n\t{\r\n\t\tlog.debug(`getting javascript and styles for chunk \"${name}\"`)\r\n\r\n\t\t// get javascript chunk real file path\r\n\r\n\t\tconst javascript = get_assets(name, 'js')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (javascript)\r\n\t\t{\r\n\t\t\tlog.debug(` (got javascript)`)\r\n\t\t\toutput.javascript[name] = javascript\r\n\t\t}\r\n\r\n\t\t// get style chunk real file path\r\n\r\n\t\tconst style = get_assets(name, 'css')[0]\r\n\t\t// the second asset is usually a source map\r\n\r\n\t\tif (style)\r\n\t\t{\r\n\t\t\tlog.debug(` (got style)`)\r\n\t\t\toutput.styles[name] = style\r\n\t\t}\r\n\t})\r\n\r\n\t// gets asset paths by name and extension of their chunk\r\n\tfunction get_assets(name, extension = 'js')\r\n\t{\r\n\t\tlet chunk = json.assetsByChunkName[name]\r\n\r\n\t\t// a chunk could be a string or an array, so make sure it is an array\r\n\t\tif (!(Array.isArray(chunk)))\r\n\t\t{\r\n\t\t\tchunk = [chunk]\r\n\t\t}\r\n\r\n\t\treturn chunk\r\n\t\t\t// filter by extension\r\n\t\t\t.filter(name => path.extname(name) === `.${extension}`)\r\n\t\t\t// adjust the real path (can be http, filesystem)\r\n\t\t\t.map(name => options.assets_base_url + name)\r\n\t}\r\n\r\n\t// one can supply a custom filter\r\n\tconst default_filter = (module, regular_expression) => regular_expression.test(module.name)\r\n\t// one can supply a custom namer\r\n\tconst default_asset_path = module => module.name\r\n\t// one can supply a custom parser\r\n\tconst default_parser = module => module.source\r\n\r\n\t// 1st pass\r\n\tconst parsed_assets = {}\r\n\r\n\t// global paths to parsed asset paths\r\n\tconst global_paths_to_parsed_asset_paths = {}\r\n\r\n\t// define __webpack_public_path__ webpack variable\r\n\t// (resolves \"ReferenceError: __webpack_public_path__ is not defined\")\r\n\tconst define_webpack_public_path = 'var __webpack_public_path__ = ' + JSON.stringify(options.assets_base_url) + ';\\n'\r\n\r\n\t// for each user specified asset type\r\n\tfor (let asset_type of Object.keys(options.assets))\r\n\t{\r\n\t\t// asset type settings\r\n\t\tconst asset_type_settings = options.assets[asset_type]\r\n\r\n\t\t// one can supply his own filter\r\n\t\tconst filter = (asset_type_settings.filter || default_filter) //.bind(this)\r\n\t\t// one can supply his own path parser\r\n\t\tconst extract_asset_path = (asset_type_settings.path || default_asset_path) //.bind(this)\r\n\t\t// one can supply his own parser\r\n\t\tconst parser = (asset_type_settings.parser || default_parser) //.bind(this)\r\n\r\n\t\t// guard agains typos, etc\r\n\r\n\t\t// for filter\r\n\t\tif (!asset_type_settings.filter)\r\n\t\t{\r\n\t\t\tlog.debug(`No filter specified for \"${asset_type}\" assets. Using a default one.`)\r\n\t\t}\r\n\r\n\t\t// for path parser\r\n\t\tif (!asset_type_settings.path)\r\n\t\t{\r\n\t\t\tlog.debug(`No path parser specified for \"${asset_type}\" assets. Using a default one.`)\r\n\t\t}\r\n\r\n\t\t// for parser\r\n\t\tif (!asset_type_settings.parser)\r\n\t\t{\r\n\t\t\tlog.debug(`No parser specified for \"${asset_type}\" assets. Using a default one.`)\r\n\t\t}\r\n\r\n\t\tlog.debug(`parsing assets of type \"${asset_type}\"`)\r\n\r\n\t\t// timer start\r\n\t\tconst began_at = new Date().getTime()\r\n\r\n\t\t// get real paths for all the files from this asset type\r\n\t\tjson.modules\r\n\t\t\t// take just modules of this asset type\r\n\t\t\t.filter(module =>\r\n\t\t\t{\r\n\t\t\t\t// check that this asset is of the asset type\r\n\t\t\t\tif (!filter(module, options.regular_expressions[asset_type], options, log))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// guard against an empty source.\r\n\t\t\t\tif (!module.source)\r\n\t\t\t\t{\r\n\t\t\t\t\tlog.error(`Module \"${module.name}\" has no source. Maybe Webpack compilation of this module failed. Skipping this asset.`)\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// include this asset\r\n\t\t\t\treturn true\r\n\t\t\t})\r\n\t\t\t.reduce((set, module) =>\r\n\t\t\t{\r\n\t\t\t\t// determine asset real path\r\n\t\t\t\tconst asset_path = extract_asset_path(module, options, log)\r\n\r\n\t\t\t\t// asset module source, or asset content (or whatever else)\r\n\t\t\t\tconst parsed_asset = parser(module, options, log)\r\n\r\n\t\t\t\tlog.trace(`Adding asset \"${asset_path}\", module id ${module.id} (in webpack-stats.json)`)\r\n\r\n\t\t\t\t// check for naming collisions (just in case)\r\n\t\t\t\tif (exists(set[asset_path]))\r\n\t\t\t\t{\r\n\t\t\t\t\tlog.error('-----------------------------------------------------------------')\r\n\t\t\t\t\tlog.error(`Asset with path \"${asset_path}\" was overwritten because of path collision.`)\r\n\t\t\t\t\tlog.error(`Use the \"filter\" function of this asset type to narrow the results.`)\r\n\t\t\t\t\tlog.error(`Previous asset with this path:`)\r\n\t\t\t\t\tlog.error(set[asset_path])\r\n\t\t\t\t\tlog.error(`New asset with this path:`)\r\n\t\t\t\t\tlog.error(parsed_asset)\r\n\t\t\t\t\tlog.error('-----------------------------------------------------------------')\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// add this asset to the list\r\n\t\t\t\t//\r\n\t\t\t\t// also resolve \"ReferenceError: __webpack_public_path__ is not defined\".\r\n\t\t\t\t// because it may be a url-loaded resource (e.g. a font inside a style).\r\n\t\t\t\tset[asset_path] = define_webpack_public_path + require_hacker.to_javascript_module_source(parsed_asset)\r\n\r\n\t\t\t\t// add path mapping\r\n\t\t\t\tglobal_paths_to_parsed_asset_paths[path.resolve(options.project_path, asset_path)] = asset_path\r\n\r\n\t\t\t\t// continue\r\n\t\t\t\treturn set\r\n\t\t\t},\r\n\t\t\tparsed_assets)\r\n\r\n\t\t// timer stop\r\n\t\tlog.debug(` time taken: ${new Date().getTime() - began_at} ms`)\r\n\t}\r\n\r\n\t// register a special require() hook for requiring() raw webpack modules\r\n\tconst require_hook = require_hacker.global_hook('webpack-module', (required_path, module) =>\r\n\t{\r\n\t\tlog.debug(`require()ing \"${required_path}\"`)\r\n\r\n\t\t// if Webpack aliases are supplied\r\n\t\tif (options.alias)\r\n\t\t{\r\n\t\t\t// possibly alias the path\r\n\t\t\tconst aliased_global_path = alias_hook(required_path, module, options.project_path, options.alias, log)\r\n\r\n\t\t\t// if an alias is found\r\n\t\t\tif (aliased_global_path)\r\n\t\t\t{\r\n\t\t\t\treturn require_hacker.to_javascript_module_source(require(aliased_global_path))\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// find an asset with this path\r\n\t\t//\r\n\t\t// the require()d path will be global path in case of the for..of require() loop\r\n\t\t// for the assets (the code a couple of screens below).\r\n\t\t//\r\n\t\t// (it can be anything in other cases (e.g. nested require() calls from the assets))\r\n\t\t//\r\n\t\tif (exists(global_paths_to_parsed_asset_paths[required_path]))\r\n\t\t{\r\n\t\t\tlog.debug(` found in parsed assets`)\r\n\t\t\treturn parsed_assets[global_paths_to_parsed_asset_paths[required_path]]\r\n\t\t}\r\n\r\n\t\tlog.debug(` not found in parsed assets, searching in webpack stats`)\r\n\r\n\t\t// find a webpack module which has a reason with this path\r\n\r\n\t\tconst candidates = []\r\n\r\n\t\tfor (let module of json.modules)\r\n\t\t{\r\n\t\t\tfor (let reason of module.reasons)\r\n\t\t\t{\r\n\t\t\t\tif (reason.userRequest === required_path)\r\n\t\t\t\t{\r\n\t\t\t\t\tcandidates.push(module)\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// guard against ambiguity\r\n\r\n\t\tif (candidates.length === 1)\r\n\t\t{\r\n\t\t\tlog.debug(` found in webpack stats, module id ${candidates[0].id}`)\r\n\r\n\t\t\t// also resolve \"ReferenceError: __webpack_public_path__ is not defined\".\r\n\t\t\t// because it may be a url-loaded resource (e.g. a font inside a style).\r\n\t\t\treturn define_webpack_public_path + candidates[0].source\r\n\t\t}\r\n\r\n\t\t// if there are more than one candidate for this require()d path,\r\n\t\t// then try to guess which one is the one require()d\r\n\r\n\t\tif (candidates.length > 1)\r\n\t\t{\r\n\t\t\tlog.debug(` More than a single candidate module was found in webpack stats for require()d path \"${required_path}\"`)\r\n\r\n\t\t\tfor (let candidate of candidates)\r\n\t\t\t{\r\n\t\t\t\tlog.debug(' ', candidate)\r\n\t\t\t}\r\n\r\n\t\t\t// (loaders matter so the program can't simply throw them away from the required path)\r\n\t\t\t//\r\n\t\t\t// // tries to normalize a cryptic Webpack loader path\r\n\t\t\t// // into a regular relative file path\r\n\t\t\t// // https://webpack.github.io/docs/loaders.html\r\n\t\t\t// let filesystem_required_path = last(required_path\r\n\t\t\t// \t.replace(/^!!/, '')\r\n\t\t\t// \t.replace(/^!/, '')\r\n\t\t\t// \t.replace(/^-!/, '')\r\n\t\t\t// \t.split('!'))\r\n\r\n\t\t\tconst fail = () =>\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(`More than a single candidate module was found in webpack stats for require()d path \"${required_path}\". Enable \"debug: true\" flag in webpack-isomorphic-tools configuration for more info.`)\r\n\t\t\t}\r\n\r\n\t\t\t// https://webpack.github.io/docs/loaders.html\r\n\t\t\tconst is_webpack_loader_path = required_path.indexOf('!') >= 0\r\n\r\n\t\t\t// if it's a Webpack loader-powered path, the code gives up\r\n\t\t\tif (is_webpack_loader_path)\r\n\t\t\t{\r\n\t\t\t\tfail()\r\n\t\t\t}\r\n\r\n\t\t\t// from here on it's either a filesystem path or an npm module path\r\n\r\n\t\t\tconst is_a_global_path = path => starts_with(path, '/') || path.indexOf(':') > 0\r\n\t\t\tconst is_a_relative_path = path => starts_with(path, './') || starts_with(path, '../')\r\n\r\n\t\t\tconst is_relative_path = is_a_relative_path(required_path)\r\n\t\t\tconst is_global_path = is_a_global_path(required_path)\r\n\t\t\tconst is_npm_module_path = !is_relative_path && !is_global_path\r\n\r\n\t\t\t// if it's a global path it can be resolved right away\r\n\t\t\tif (is_global_path)\r\n\t\t\t{\r\n\t\t\t\treturn require_hacker.to_javascript_module_source(require(required_path))\r\n\t\t\t}\r\n\r\n\t\t\t// from here on it's either a relative filesystem path or an npm module path,\r\n\t\t\t// so it can be resolved against the require()ing file path (if it can be recovered).\r\n\r\n\t\t\t// `module.filename` here can be anything, not just a filesystem absolute path,\r\n\t\t\t// since some advanced require() hook trickery is involved.\r\n\t\t\t// therefore it will be parsed.\r\n\t\t\t//\r\n\t\t\tlet requiring_file_path = module.filename.replace(/\\.webpack-module$/, '')\r\n\r\n\t\t\t// if it's a webpack loader-powered path, then extract the filesystem path from it\r\n\t\t\tif (requiring_file_path.indexOf('!') >= 0)\r\n\t\t\t{\r\n\t\t\t\trequiring_file_path = requiring_file_path.substring(requiring_file_path.lastIndexOf('!') + 1)\r\n\t\t\t}\r\n\r\n\t\t\t// make relative path global\r\n\t\t\tif (is_a_relative_path(requiring_file_path))\r\n\t\t\t{\r\n\t\t\t\trequiring_file_path = path.resolve(options.project_path, requiring_file_path)\r\n\t\t\t}\r\n\r\n\t\t\t// if `requiring_file_path` is a filesystem path (not an npm module path),\r\n\t\t\t// then the require()d path can possibly be resolved\r\n\t\t\tif (is_a_global_path(requiring_file_path))\r\n\t\t\t{\r\n\t\t\t\tlog.debug(` The module is being require()d from \"${requiring_file_path}\", so resolving the path against this file`)\r\n\r\n\t\t\t\t// if it's a relative path, can try to resolve it\r\n\t\t\t\tif (is_relative_path)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn require_hacker.to_javascript_module_source(require(path.resolve(requiring_file_path, '..', required_path)))\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if it's an npm module path (e.g. 'babel-runtime/core-js/object/assign'),\r\n\t\t\t\t// can try to require() it from the requiring asset path\r\n\t\t\t\tif (is_npm_module_path && is_a_global_path(module.filename))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn require_hacker.to_javascript_module_source(require(require_hacker.resolve(required_path, module)))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// if it's still here then it means it's either a\r\n\t\t\tfail()\r\n\t\t}\r\n\t})\r\n\r\n\tlog.debug(`compiling assets`)\r\n\r\n\t// timer start\r\n\tconst began_at = new Date().getTime()\r\n\r\n\t// evaluate parsed assets source code\r\n\tfor (let asset_path of Object.keys(parsed_assets))\r\n\t{\r\n\t\t// set asset value\r\n\t\tlog.debug(`compiling asset \"${asset_path}\"`)\r\n\t\toutput.assets[asset_path] = require(path.resolve(options.project_path, asset_path))\r\n\r\n\t\t// inside that require() call above\r\n\t\t// all the assets are resolved relative to this `module`,\r\n\t\t// which is irrelevant because they are all absolute filesystem paths.\r\n\t\t//\r\n\t\t// if in some of those assets a nested require() call is present\r\n\t\t// then it will be resolved relative to that asset folder.\r\n\t}\r\n\r\n\t// unmount the previously installed require() hook\r\n\trequire_hook.unmount()\r\n\r\n\t// timer stop\r\n\tlog.debug(` time taken: ${new Date().getTime() - began_at} ms`)\r\n}\r\n"]}